import datetime
import time
import telebot
from telebot import types
import requests
import json

# –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∫ API —è–Ω–¥–µ–∫—Å https://yandex.ru/dev/rasp/doc/ru/reference/schedule-point-point

bot = telebot.TeleBot('7076862024:AAFP0rijMMQJFeh9waQ_rDVFL03tKZGA67k')
#api_key = '3fcba97e-6f2f-4bfc-8ea1-15e33e222275'
api_token = '8d9dc41f692f04216d5adb57aafb5f2b'
api_partner_key = '545748'
# –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∫ API –∞–≤–∏–∞—Å–µ–π–ª—Å https://support.travelpayouts.com/hc/ru/articles/203956163-API-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-Aviasales-%D0%B4%D0%BB%D1%8F-%D0%BF%D0%B0%D1%80%D1%82%D0%BD%D1%91%D1%80%D0%BE%D0%B2

today = datetime.date.today()
print(today)
tomorrow = today + datetime.timedelta(days=1)
print(tomorrow)
root_link = 'https://www.aviasales.ru'
def construct_answer(data):

    departure_at = data['data'][0]['departure_at']
    price = data['data'][0]['price']
    end_link = root_link + data['data'][0]['link']
    result = '–ù–∞—à–µ–ª —Ä–µ–π—Å –°–æ—á–∏ -> –ë–µ–ª–≥—Ä–∞–¥:\n' \
             '–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:{}\n' \
             '–¶–µ–Ω–∞:{} —Ä—É–±.\n' \
             '–°—Å—ã–ª–∫–∞: {}'.format(departure_at, price, end_link)
    return result


@bot.message_handler(commands=['start'])
def start(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    markup.add(btn1)
    bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫!", reply_markup=markup)

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è' or message.text == '–ù–∞–∑–∞–¥':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–ë–ª–∏–∂–∞–π—à–∏–π —Å–∞–º–æ–ª–µ—Ç –°–æ—á–∏ -> –ë–µ–ª–≥—Ä–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')
        markup.add(btn1)
        bot.send_message(message.from_user.id, '‚ùì –ó–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å', reply_markup=markup)

    elif message.text == '–î—Ä—É–≥–æ–µ' or message.text == '–ë–ª–∏–∂–∞–π—à–∏–π —Å–∞–º–æ–ª–µ—Ç –°–æ—á–∏ -> –ë–µ–ª–≥—Ä–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('Low')
        btn2 = types.KeyboardButton('High')
        btn3 = types.KeyboardButton('Custom')
        btn4 = types.KeyboardButton('History')
        btn5 = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.add(btn1, btn2, btn3, btn4, btn5)
        bot.send_message(message.from_user.id, '‚ùì –ö–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å –Ω—É–∂–µ–Ω?', reply_markup=markup)

    elif message.text == 'Low':
        bot.send_message(message.from_user.id, '–°–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –±–∏–ª–µ—Ç –°–æ—á–∏ -> –ë–µ–ª–≥—Ä–∞–¥', parse_mode='Markdown')
        my_req = requests.get('https://api.travelpayouts.com/aviasales/v3/prices_for_dates?'
                              'origin=AER&'
                              'destination=BEG&'
                              'departure_at={departure_at}&'
                              'unique=true&'
                              'sorting=price&'
                              'direct=false&'
                              'currency=rub&'
                              'limit=10&'
                              'page=1&'
                              'one_way=true&'
                              'token={token}'.format(departure_at=tomorrow, token=api_token))

        data = json.loads(my_req.text)
        print('data ok')
        with open('result.json', 'w', encoding='utf-8') as file:
            json.dump(data, file, indent=4, ensure_ascii=False)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btn1 = types.KeyboardButton('–ù–∞–∑–∞–¥')
        btn2 = types.KeyboardButton('–î—Ä—É–≥–æ–µ')
        markup.add(btn1, btn2)
        bot.send_message(message.from_user.id, construct_answer(data), reply_markup=markup)
    
    elif message.text == 'High':
        bot.send_message(message.from_user.id, '–í—ã–¥–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', parse_mode='Markdown')
        bot.send_message(message.from_user.id, '–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –±–∏–ª–µ—Ç –°–æ—á–∏ -> –ë–µ–ª–≥—Ä–∞–¥', parse_mode='Markdown')
        my_req = requests.get('https://api.travelpayouts.com/aviasales/v3/prices_for_dates?'
                              'origin=AER&'
                              'destination=BEG&'
                              'departure_at={departure_at}&'
                              'unique=true&'
                              'sorting=route&'
                              'direct=false&'
                              'currency=rub&'
                              'limit=10&'
                              'page=1&'
                              'one_way=true&'
                              'token={token}'.format(departure_at=tomorrow, token=api_token))

        data = json.loads(my_req.text)
        print('data ok')
        with open('result.json', 'w', encoding='utf-8') as file:
            json.dump(data, file, indent=4, ensure_ascii=False)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btn1 = types.KeyboardButton('–ù–∞–∑–∞–¥')
        btn2 = types.KeyboardButton('–î—Ä—É–≥–æ–µ')
        markup.add(btn1, btn2)
        bot.send_message(message.from_user.id, construct_answer(data), reply_markup=markup)

    elif message.text == 'Custom':
        bot.send_message(message.from_user.id, '–í—ã–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç', parse_mode='Markdown')
        bot.send_message(message.from_user.id, '–•–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –¥–∞—Ç—ã?', parse_mode='Markdown')
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ yyyy-mm-dd', parse_mode='Markdown')
        bot.register_next_step_handler(message, get_castom_daydata)


    elif message.text == 'History':
        bot.send_message(message.from_user.id, '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤', parse_mode='Markdown')
        bot.send_message(message.from_user.id, '–ü–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', parse_mode='Markdown')


@bot.message_handler(content_types=['text'])
def get_castom_daydata(message):
    try:
        struct = time.strptime(message.text, '%Y-%m-%d')
        valid_date = time.strftime('%Y-%m-%d', struct)
        bot.send_message(message.from_user.id, '–°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä–∏–º', parse_mode='Markdown')
    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btn1 = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.add(btn1)
        bot.send_message(message.from_user.id, '–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑', reply_markup=markup)
        if message.text == '–ù–∞–∑–∞–¥':
            bot.register_next_step_handler(message, get_text_messages)
        else:
            bot.register_next_step_handler(message, get_castom_daydata)
    else:
        bot.send_message(message.from_user.id, '–°–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –±–∏–ª–µ—Ç –°–æ—á–∏ -> –ë–µ–ª–≥—Ä–∞–¥', parse_mode='Markdown')
        my_req = requests.get('https://api.travelpayouts.com/aviasales/v3/prices_for_dates?'
                              'origin=AER&'
                              'destination=BEG&'
                              'departure_at={departure_at}&'
                              'unique=true&'
                              'sorting=price&'
                              'direct=false&'
                              'currency=rub&'
                              'limit=10&'
                              'page=1&'
                              'one_way=true&'
                              'token={token}'.format(departure_at=valid_date, token=api_token))

        data = json.loads(my_req.text)
        print('data ok')
        with open('result.json', 'w', encoding='utf-8') as file:
            json.dump(data, file, indent=4, ensure_ascii=False)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btn1 = types.KeyboardButton('–ù–∞–∑–∞–¥')
        btn2 = types.KeyboardButton('–î—Ä—É–≥–æ–µ')
        markup.add(btn1, btn2)
        bot.send_message(message.from_user.id, construct_answer(data), reply_markup=markup)


bot.polling(none_stop=True, interval=0) #–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —á–∞—Å—Ç—å
#test
#bot.infinity_polling(skip_pending=True)