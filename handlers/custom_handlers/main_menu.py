import datetime
import time
import telebot
from telebot import types
from loader import bot
from telebot import types
import requests
import json
import os
#from . import main_menu
from dotenv import load_dotenv, find_dotenv
from loader import bot
from states.dialog_state import UserDialogState
from telebot.types import Message
from keyboards.reply.menu_keyboard import menu
from keyboards.reply.menu_keyboard import get_ticket
from keyboards.reply.menu_keyboard import cancel
from utils.misc.get_low_request import low_request
from utils.misc.get_high_request import high_request
from utils.misc.get_custom_daydata import custom_daydata_request



api_token = os.getenv("RAPID_API_KEY")
today = datetime.date.today()
print('main_menu Ready')
tomorrow = today + datetime.timedelta(days=1)
root_link = 'https://www.aviasales.ru'


def construct_answer(data):

    departure_at = data['data'][0]['departure_at']
    price = data['data'][0]['price']
    end_link = root_link + data['data'][0]['link']
    result = '–ù–∞—à–µ–ª —Ä–µ–π—Å –°–æ—á–∏ -> –ë–µ–ª–≥—Ä–∞–¥:\n' \
             '–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:{}\n' \
             '–¶–µ–Ω–∞:{} —Ä—É–±.\n' \
             '–°—Å—ã–ª–∫–∞: {}'.format(departure_at, price, end_link)
    return result


@bot.message_handler(commands=["start_dialog"]) # –õ–æ–≤–∏–º –∫–æ–º–∞–Ω–¥—É
def handle_command(message: Message):
    bot.send_message(message.from_user.id, 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫!')  # welcome: –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è
    bot.send_message(message.from_user.id, '–ú–æ–≥—É –ø–æ–º–æ—á—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –±–∏–ª–µ—Ç—ã –Ω–∞ —Å–∞–º–æ–ª–µ—Ç –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é'
                                           ' –°–æ—á–∏ -> –ë–µ–ª–≥—Ä–∞–¥. '
                                           '\n–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É',
                     reply_markup=menu())
    bot.set_state(message.from_user.id, UserDialogState.start_dialog) # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —Ö–µ–Ω–¥–ª–µ—Ä start_dialog –∏ –∂–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ

    #–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∑–¥–µ—Å—å –∏ –∂–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(state=UserDialogState.start_dialog) # –õ–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
def handle_start_dialog(message: Message):
    #bot.send_message(message.from_user.id, 'Low or High??', reply_markup=menu())  # menu: Low, High, –ù–∞–∑–∞–¥
    if message.text == '–°–∞–º—ã–π –¥–µ—à–µ–≤—ã–π - Low':
        bot.send_message(message.from_user.id, '–í—ã–±—Ä–∞–Ω Low', reply_markup=get_ticket())
        bot.set_state(message.from_user.id, UserDialogState.state_low)
    elif message.text == '–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π - High':
        bot.send_message(message.from_user.id, '–í—ã–±—Ä–∞–Ω High', reply_markup=get_ticket())
        bot.set_state(message.from_user.id, UserDialogState.state_high)
    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É':
        bot.send_message(message.from_user.id, '–í—ã–±—Ä–∞–Ω Custom')
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD')
        bot.set_state(message.from_user.id, UserDialogState.state_custom)


@bot.message_handler(state=UserDialogState.state_low)
def handle_state_low(message: Message):
    bot.send_message(message.from_user.id, '–°–µ–π—á–∞—Å –≤ Low')
    bot.send_message(message.from_user.id, '–°–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –±–∏–ª–µ—Ç –°–æ—á–∏ -> –ë–µ–ª–≥—Ä–∞–¥')
    bot.send_message(message.from_user.id, low_request())
    bot.send_message(message.from_user.id, '–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞', reply_markup=menu())
    bot.set_state(message.from_user.id, UserDialogState.start_dialog)


@bot.message_handler(state=UserDialogState.state_high)
def handle_state_high(message: Message):
    bot.send_message(message.from_user.id, '–°–µ–π—á–∞—Å –≤ High')
    bot.send_message(message.from_user.id, '–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –±–∏–ª–µ—Ç –°–æ—á–∏ -> –ë–µ–ª–≥—Ä–∞–¥')
    bot.send_message(message.from_user.id, high_request())
    bot.send_message(message.from_user.id, '–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞', reply_markup=menu())
    bot.set_state(message.from_user.id, UserDialogState.start_dialog)


@bot.message_handler(state=UserDialogState.state_custom)
def handle_state_custom(message: Message):
    try:
        struct = time.strptime(message.text, '%Y-%m-%d')
        valid_date = time.strftime('%Y-%m-%d', struct)
        bot.send_message(message.from_user.id, '–°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä–∏–º')
    except ValueError:
        bot.send_message(message.from_user.id, '–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑', reply_markup=cancel())
        if message.text == '–û—Ç–º–µ–Ω–∞':  # TODO –Ω–µ –ø–æ–Ω–∏–º–∞—é –ø–æ—á–µ–º—É —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–µ —Ö–æ—á–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            bot.send_message(message.from_user.id, '–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞', reply_markup=menu())
            bot.set_state(message.from_user.id, UserDialogState.start_dialog)
    else:
        bot.send_message(message.from_user.id, '–°–µ–π—á–∞—Å –≤ Custom')
        bot.send_message(message.from_user.id, '–°–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –±–∏–ª–µ—Ç –°–æ—á–∏ -> –ë–µ–ª–≥—Ä–∞–¥ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å')
        bot.send_message(message.from_user.id, custom_daydata_request(valid_date))
        bot.send_message(message.from_user.id, '–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞', reply_markup=menu())
        bot.set_state(message.from_user.id, UserDialogState.start_dialog)





@bot.message_handler(content_types=['text'],
                     func=lambda msg: msg.text == "–ù–∞–∑–∞–¥"  # –ï—Å–ª–∏ –≤–≤–µ–ª–∏ –Ω–∞–∑–∞–¥ –∏–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
                     )
def handle_back_button(message: Message):
    bot.send_message(message.from_user.id, '–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞', reply_markup=menu())
    bot.set_state(message.from_user.id, UserDialogState.start_dialog)  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞




'''

@bot.message_handler(content_types=['text'])
def main_menu(message):
    if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–ë–ª–∏–∂–∞–π—à–∏–π —Å–∞–º–æ–ª–µ—Ç –°–æ—á–∏ -> –ë–µ–ª–≥—Ä–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')
        markup.add(btn1)
        bot.send_message(message.from_user.id, '‚ùì –ó–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å', reply_markup=markup)

    elif message.text == '–ë–ª–∏–∂–∞–π—à–∏–π —Å–∞–º–æ–ª–µ—Ç –°–æ—á–∏ -> –ë–µ–ª–≥—Ä–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('Low')
        btn2 = types.KeyboardButton('High')
        btn3 = types.KeyboardButton('Custom')
        btn4 = types.KeyboardButton('History')
        #btn5 = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.add(btn1, btn2, btn3, btn4)
        bot.send_message(message.from_user.id, '‚ùì –ö–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å –Ω—É–∂–µ–Ω?', reply_markup=markup)

    elif message.text == 'Low':
        bot.register_next_step_handler(message, get_low_request)

    elif message.text == 'High':
        bot.register_next_step_handler(message, get_high_request)

    elif message.text == 'Custom':
        bot.send_message(message.from_user.id, '–í—ã–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç', parse_mode='Markdown')
        bot.send_message(message.from_user.id, '–•–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –¥–∞—Ç—ã?', parse_mode='Markdown')
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ yyyy-mm-dd    (main_menu)', parse_mode='Markdown')
        bot.register_next_step_handler(message, get_castom_daydata)

    elif message.text == 'History':
        bot.send_message(message.from_user.id, '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤', parse_mode='Markdown')
        bot.send_message(message.from_user.id, '–ü–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', parse_mode='Markdown')

    else:
        bot.send_message(message.from_user.id, '–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã —è –Ω–µ –∑–Ω–∞—é', parse_mode='Markdown')
    #elif user_message == '–ù–∞–∑–∞–¥':
        #bot.send_message(message.from_user.id, '–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', parse_mode='Markdown')

'''